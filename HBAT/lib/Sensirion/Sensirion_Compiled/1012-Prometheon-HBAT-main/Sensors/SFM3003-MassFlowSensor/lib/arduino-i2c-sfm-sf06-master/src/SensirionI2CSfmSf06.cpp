/*
 * THIS FILE IS AUTOMATICALLY GENERATED
 *
 * I2C-Generator: 0.3.0
 * Yaml Version: 1.1.0
 * Template Version: 0.7.0-99-gc51b50d
 */
/*
 * Copyright (c) 2021, Sensirion AG
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Sensirion AG nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#include "SensirionI2CSfmSf06.h"
#include "Arduino.h"
#include "SensirionCore.h"
#include <Wire.h>

#define SFM_SF06_I2C_ADDRESS _i2c_address

SensirionI2CSfmSf06::SensirionI2CSfmSf06() {
}

void SensirionI2CSfmSf06::begin(TwoWire& i2cBus, uint8_t i2c_address) {
    _i2cBus = &i2cBus;
    _i2c_address = i2c_address;
}

uint16_t SensirionI2CSfmSf06::startO2ContinuousMeasurement() {
    uint16_t error = 0;
    uint8_t buffer[2];
    error = readScaleOffsetUnit(CmdO2measurement, _flowScaleFactor, _flowOffset,
                                _flowUnit);
    if (error) {
        return error;
    }

    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3603, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t SensirionI2CSfmSf06::startAirContinuousMeasurement() {
    uint16_t error = 0;
    uint8_t buffer[2];
    error = readScaleOffsetUnit(CmdAirMeasurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }

    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3608, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t SensirionI2CSfmSf06::startN2OContinuousMeasurement() {
    uint16_t error = 0;
    uint8_t buffer[2];
    error = readScaleOffsetUnit(CmdN2OMeasurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3615, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t SensirionI2CSfmSf06::startCO2ContinuousMeasurement() {
    uint16_t error = 0;
    uint8_t buffer[2];
    error = readScaleOffsetUnit(CmdCO2Measurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x361E, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t
SensirionI2CSfmSf06::startAirO2ContinuousMeasurement(uint16_t volumeFraction) {
    uint16_t error = 0;
    uint8_t buffer[5];

    error = readScaleOffsetUnit(CmdAirO2Measurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3632, buffer, 5);

    error |= txFrame.addUInt16(volumeFraction);

    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t
SensirionI2CSfmSf06::startN2OO2ContinuousMeasurement(uint16_t volumeFraction) {
    uint16_t error = 0;
    uint8_t buffer[5];

    error = readScaleOffsetUnit(CmdN2OO2Measurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3639, buffer, 5);

    error |= txFrame.addUInt16(volumeFraction);

    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t
SensirionI2CSfmSf06::startCO2O2ContinuousMeasurement(uint16_t volumeFraction) {
    uint16_t error = 0;
    uint8_t buffer[5];

    error = readScaleOffsetUnit(CmdCO2O2Measurement, _flowScaleFactor,
                                _flowOffset, _flowUnit);
    if (error) {
        return error;
    }
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3646, buffer, 5);

    error |= txFrame.addUInt16(volumeFraction);

    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    delay(12);
    return error;
}

uint16_t SensirionI2CSfmSf06::readMeasurementDataRaw(int16_t& flow,
                                                     int16_t& temperature,
                                                     uint16_t& statusWord) {
    uint16_t error = 0;
    uint8_t buffer[9];

    // nothing has to be written at this point
    SensirionI2CRxFrame rxFrame(buffer, 9);
    error = SensirionI2CCommunication::receiveFrame(SFM_SF06_I2C_ADDRESS, 9,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getInt16(flow);
    error |= rxFrame.getInt16(temperature);
    error |= rxFrame.getUInt16(statusWord);
    return error;
}

uint16_t SensirionI2CSfmSf06::readMeasurementData(float& flow,
                                                  float& temperature,
                                                  uint16_t& statusWord) {
    int16_t intFlow = 0;
    int16_t intTemperature = 0;
    flow = 0.0;
    temperature = 0.0;

    uint16_t error =
        readMeasurementDataRaw(intFlow, intTemperature, statusWord);
    if (!error) {
        flow = (float) (intFlow - _flowOffset) / _flowScaleFactor;
        temperature = intTemperature / 200.0;
    }
    return error;
}

uint16_t SensirionI2CSfmSf06::updateConcentrationSet(uint16_t volumeFraction) {
    uint16_t error = 0;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0xE17D, buffer, 5);

    error |= txFrame.addUInt16(volumeFraction);

    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                *_i2cBus);
}

uint16_t SensirionI2CSfmSf06::updateConcentrationActivate() {
    uint16_t error = 0;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0xE000, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    return error;
}

uint16_t SensirionI2CSfmSf06::updateConcentration(uint16_t volumeFraction) {
    uint16_t error = updateConcentrationSet(volumeFraction);
    if (error) {
        return error;
    }
    return updateConcentrationActivate();
}

uint16_t SensirionI2CSfmSf06::stopContinuousMeasurement() {
    uint16_t error = 0;
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3FF9, buffer, 2);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    return error;
}

uint16_t SensirionI2CSfmSf06::configureAveraging(uint16_t averageWindow) {
    uint16_t error = 0;
    uint8_t buffer[5];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x366A, buffer, 5);

    error |= txFrame.addUInt16(averageWindow);

    if (error) {
        return error;
    }

    return SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                *_i2cBus);
}

uint16_t SensirionI2CSfmSf06::readScaleOffsetUnit(CommandCode commandCode,
                                                  int16_t& flowScaleFactor,
                                                  int16_t& flowOffset,
                                                  uint16_t& flowUnit) {
    uint16_t error = 0;
    uint8_t buffer[9];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3661, buffer, 9);

    error |= txFrame.addUInt16(static_cast<uint16_t>(commandCode));
    if (error) {
        return error;
    }

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 9);
    error = SensirionI2CCommunication::receiveFrame(SFM_SF06_I2C_ADDRESS, 9,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getInt16(flowScaleFactor);
    error |= rxFrame.getInt16(flowOffset);
    error |= rxFrame.getUInt16(flowUnit);
    if (!error) {
        _flowOffset = flowOffset;
        _flowScaleFactor = flowScaleFactor;
    }
    return error;
}

uint16_t SensirionI2CSfmSf06::enterSleep() {
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x3677, buffer, 2);

    SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                         *_i2cBus);
    return 0;
}

uint16_t SensirionI2CSfmSf06::exitSleep() {
    uint8_t buffer[2];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0x00, buffer, 2);

    SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                         *_i2cBus);
    return 0;
}

uint16_t SensirionI2CSfmSf06::readProductIdentifier(uint32_t& productIdentifier,
                                                    uint8_t serialNumber[],
                                                    uint8_t serialNumberSize) {
    uint16_t error = 0;
    uint8_t buffer[18];
    SensirionI2CTxFrame txFrame =
        SensirionI2CTxFrame::createWithUInt16Command(0xE102, buffer, 18);

    error = SensirionI2CCommunication::sendFrame(SFM_SF06_I2C_ADDRESS, txFrame,
                                                 *_i2cBus);
    if (error) {
        return error;
    }

    delay(1);

    SensirionI2CRxFrame rxFrame(buffer, 18);
    error = SensirionI2CCommunication::receiveFrame(SFM_SF06_I2C_ADDRESS, 18,
                                                    rxFrame, *_i2cBus);
    if (error) {
        return error;
    }

    error |= rxFrame.getUInt32(productIdentifier);
    error |= rxFrame.getBytes(serialNumber, serialNumberSize);
    return error;
}
